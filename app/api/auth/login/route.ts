/*import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import clientPromise from "@/lib/mongodb";
import jwt from "jsonwebtoken";
import { ObjectId } from "mongodb";

interface LoginRequestBody {
  email: string;
  password: string;
}

export async function POST(req: NextRequest) {
  try {
    console.log("üîµ ===== D√âBUT DE LA TENTATIVE DE CONNEXION =====");
    const { email, password } = await req.json();
    console.log("üìß Email re√ßu:", email);

    // Validation des donn√©es
    if (!email || !password) {
      console.log("‚ùå Donn√©es manquantes");
      return NextResponse.json(
        { message: "Email et mot de passe requis" },
        { status: 400 }
      );
    }

    if (!email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
      console.log("‚ùå Format d'email invalide");
      return NextResponse.json(
        { message: "Format d'email invalide" },
        { status: 400 }
      );
    }

    console.log("üîå Connexion √† la base de donn√©es...");
    const client = await clientPromise;
    const db = client.db("bladi-tourisme");
    const users = db.collection("users");
    console.log("‚úÖ Base de donn√©es connect√©e");

    // Recherche de l'utilisateur
    console.log("üîç Recherche de l'utilisateur dans la base de donn√©es...");
    const user = await users.findOne({ email });
    console.log("üì¶ Donn√©es utilisateur trouv√©es:", {
      id: user?._id,
      email: user?.email,
      role: user?.role,
      emailVerified: user?.emailVerified,
    });

    if (!user) {
      console.log("‚ùå Utilisateur non trouv√©");
      return NextResponse.json(
        { message: "Email ou mot de passe incorrect" },
        { status: 401 }
      );
    }

    // V√©rification du r√¥le
    console.log("üîç V√©rification du r√¥le dans les donn√©es utilisateur");
    console.log("R√¥le trouv√©:", user.role);
    console.log("Type du r√¥le:", typeof user.role);
    console.log("R√¥le exact:", JSON.stringify(user.role));

    // V√©rification du mot de passe
    console.log("üîê V√©rification du mot de passe...");
    const isValidPassword = await bcrypt.compare(password, user.password);

    if (!isValidPassword) {
      console.log("‚ùå Mot de passe incorrect");
      return NextResponse.json(
        { message: "Email ou mot de passe incorrect" },
        { status: 401 }
      );
    }

    console.log("‚úÖ Mot de passe correct");

    // V√©rification de l'email
    if (!user.emailVerified) {
      console.log("‚ùå Email non v√©rifi√©");
      return NextResponse.json(
        { message: "Veuillez v√©rifier votre email avant de vous connecter" },
        { status: 401 }
      );
    }

    console.log("‚úÖ Email v√©rifi√©");

    // Cr√©ation du token avec le r√¥le
    console.log("üîë Cr√©ation du token...");
    const tokenPayload = {
      userId: user._id.toString(),
      role: user.role || "user", // Utiliser directement le r√¥le de la base de donn√©es
    };
    console.log("üì¶ Payload du token:", tokenPayload);

    const token = jwt.sign(
      tokenPayload,
      process.env.JWT_SECRET || "votre_secret_jwt",
      { expiresIn: "7d" }
    );

    console.log("‚úÖ Token cr√©√© avec le r√¥le:", user.role);

    // Pr√©paration de la r√©ponse avec le r√¥le
    const userResponse = {
      _id: user._id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role || "user", // Utiliser directement le r√¥le de la base de donn√©es
      emailVerified: user.emailVerified,
    };

    console.log("üì§ Envoi de la r√©ponse avec les donn√©es suivantes:");
    console.log("- R√¥le:", userResponse.role);
    console.log("- Donn√©es compl√®tes:", JSON.stringify(userResponse, null, 2));

    console.log("‚úÖ ===== FIN DE LA TENTATIVE DE CONNEXION =====");

    return NextResponse.json({
      message: "Connexion r√©ussie",
      token,
      user: userResponse,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la connexion:", error);
    return NextResponse.json(
      { message: "Erreur lors de la connexion" },
      { status: 500 }
    );
  }
}*/
import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import clientPromise from "@/lib/mongodb";
import jwt from "jsonwebtoken";
import { ObjectId } from "mongodb";

interface LoginRequestBody {
  email: string;
  password: string;
}

export async function POST(req: NextRequest) {
  try {
    console.log("üîµ ===== D√âBUT DE LA TENTATIVE DE CONNEXION =====");
    const { email, password } = await req.json();
    console.log("üìß Email re√ßu:", email);

    // Validation des donn√©es
    if (!email || !password) {
      console.log("‚ùå Donn√©es manquantes");
      return NextResponse.json(
        { message: "Email et mot de passe requis" },
        { status: 400 }
      );
    }

    if (!email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
      console.log("‚ùå Format d'email invalide");
      return NextResponse.json(
        { message: "Format d'email invalide" },
        { status: 400 }
      );
    }

    console.log("üîå Connexion √† la base de donn√©es...");
    const client = await clientPromise;
    const db = client.db("bladi-tourisme");
    const users = db.collection("users");
    console.log("‚úÖ Base de donn√©es connect√©e");

    // Recherche de l'utilisateur
    console.log("üîç Recherche de l'utilisateur dans la base de donn√©es...");
    const user = await users.findOne({ email });
    console.log("üì¶ Donn√©es utilisateur trouv√©es:", {
      id: user?._id,
      email: user?.email,
      role: user?.role,
      emailVerified: user?.emailVerified,
    });

    if (!user) {
      console.log("‚ùå Utilisateur non trouv√©");
      return NextResponse.json(
        { message: "Email ou mot de passe incorrect" },
        { status: 401 }
      );
    }

    // V√©rification du r√¥le
    console.log("üîç V√©rification du r√¥le dans les donn√©es utilisateur");
    console.log("R√¥le trouv√©:", user.role);
    console.log("Type du r√¥le:", typeof user.role);
    console.log("R√¥le exact:", JSON.stringify(user.role));

    // V√©rification du mot de passe
    console.log("üîê V√©rification du mot de passe...");
    const isValidPassword = await bcrypt.compare(password, user.password);

    if (!isValidPassword) {
      console.log("‚ùå Mot de passe incorrect");
      return NextResponse.json(
        { message: "Email ou mot de passe incorrect" },
        { status: 401 }
      );
    }

    console.log("‚úÖ Mot de passe correct");

    // V√©rification de l'email
    if (!user.emailVerified) {
      console.log("‚ùå Email non v√©rifi√©");
      return NextResponse.json(
        { message: "Veuillez v√©rifier votre email avant de vous connecter" },
        { status: 401 }
      );
    }

    console.log("‚úÖ Email v√©rifi√©");

    // Normalisation de l'email
    const normalizedEmail = user.email.trim().toLowerCase();

    // Cr√©ation du token avec le r√¥le
    console.log("üîë Cr√©ation du token...");
    const tokenPayload = {
      userId: user._id.toString(),
      email: normalizedEmail,
      role: user.role || "user",
    };
    console.log("üì¶ Payload du token:", tokenPayload);

    // V√©rification du JWT_SECRET
    if (!process.env.JWT_SECRET) {
      throw new Error("JWT_SECRET is not defined in the environment variables.");
    }

    // G√©n√©ration du token
    const token = jwt.sign(
      tokenPayload,
      process.env.JWT_SECRET,
      { expiresIn: "7d" }
    );

    console.log("‚úÖ Token cr√©√© avec le r√¥le:", user.role);

    // Pr√©paration de la r√©ponse
    const userResponse = {
      _id: user._id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role || "user",
      emailVerified: user.emailVerified,
    };

    console.log("üì§ Envoi de la r√©ponse avec les donn√©es suivantes:");
    console.log("- R√¥le:", userResponse.role);
    console.log("- Donn√©es compl√®tes:", JSON.stringify(userResponse, null, 2));

    console.log("‚úÖ ===== FIN DE LA TENTATIVE DE CONNEXION =====");

    return NextResponse.json({
      message: "Connexion r√©ussie",
      token,
      user: userResponse,
    });

  } catch (error) {
    console.error("‚ùå Erreur lors de la connexion:", error);
    return NextResponse.json(
      { message: "Erreur lors de la connexion" },
      { status: 500 }
    );
  }
}